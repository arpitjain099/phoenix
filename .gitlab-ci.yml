.docker_template:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

services:
  - docker:dind

stages:
  - test
  - build
  - publish

# GLOBAL VARIABLES
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  PHOENIX_CHART_MAIN_DIR: charts/main
  PHOENIX_CHART_MAIN_PACKAGE_PATH: phoenix_chart_main
  PHOENIX_SUPERSET_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/phoenix_superset
  PHOENIX_SUPERSET_TEST_IMAGE: $PHOENIX_SUPERSET_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  PHOENIX_SUPERSET_LATEST_IMAGE: $PHOENIX_SUPERSET_REGISTRY_IMAGE:latest
  PHOENIX_SUPERSET_RELEASE_IMAGE: $PHOENIX_SUPERSET_REGISTRY_IMAGE:main

# Run linting for console_ui
console_ui_linting:
  image: node:21.6.2
  stage: test
  script:
    - cd console_ui/
    - npm install
    - npm run lint

python_build_and_ci_projects:
  extends: .docker_template
  stage: test
  script:
    - cd python
    - docker build --build-arg PROJECT=$PROJECT -t $PROJECT .
    - docker run $PROJECT make all path=projects/$PROJECT
  parallel:
    matrix:
      - PROJECT:
          - example_project_1
          - phoenix_superset

python_ci_libs:
  stage: test
  image: python:3.11.8
  script:
    - cd python
    - make install path=libs/$LIB
    - make all path=libs/$LIB
  parallel:
    matrix:
      - LIB: [example_lib_1]

python_projects_phiphi_ci:
  extends: .docker_template
  stage: test
  script:
    - apk update && apk add make
    - cd python/projects/phiphi/
    - make all

lint_phoenix_chart_main:
  stage: test
  image:
    name: alpine/helm:3.11.1
    # This is needed or will get an error that helm cannot be run
    entrypoint: [""]
  needs: [] # Allows to run this job without waiting for the previous ones
  script:
    - helm lint $PHOENIX_CHART_MAIN_DIR

package_phoenix_chart_main:
  stage: build
  image:
    name: alpine/helm:3.11.1
    # This is needed or will get an error that helm cannot be run
    entrypoint: [""]
  needs: ["lint_phoenix_chart_main"]
  script:
    - helm package $PHOENIX_CHART_MAIN_DIR -d $PHOENIX_CHART_MAIN_PACKAGE_PATH
  artifacts:
    paths:
      - $PHOENIX_CHART_MAIN_PACKAGE_PATH/*.tgz
    # Going to pushed to package registry so it is fine to expire
    expire_in: 1 hour

build_phoenix_superset_image:
  extends: .docker_template
  stage: build
  script:
    - cd python/projects/phoenix_superset
    - docker build --pull -t $PHOENIX_SUPERSET_TEST_IMAGE .
    - docker tag $PHOENIX_SUPERSET_TEST_IMAGE $PHOENIX_SUPERSET_LATEST_IMAGE
    - docker push $PHOENIX_SUPERSET_TEST_IMAGE
    - docker push $PHOENIX_SUPERSET_LATEST_IMAGE
  needs:
    - job: python_projects_phiphi_ci
      # When this is include the pipelines doesn't run for some unknown reason
      # parallel:
        # matrix:
          # - PROJECT: phoenix_superset

publish_phoenix_chart_main:
  stage: publish
  image: curlimages/curl:7.70.0
  script:
    # There should only be one file in the PACKAGE_PATH directory
    # This command gets the file name
    - PACKAGE_FILE="$(ls -tr ${PHOENIX_CHART_MAIN_PACKAGE_PATH}/*.tgz | tail -1)"
    - echo "Publishing $PACKAGE_FILE"
    # Publish the package to the GitLab package registry
    # https://docs.gitlab.com/ee/user/packages/helm_repository/#use-cicd-to-publish-a-helm-package
    - curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@${PACKAGE_FILE}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
    - echo "Package published successfully. Use command"
    - echo "helm repo add phoenix_chart_main ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
  needs:
    - job: package_phoenix_chart_main
      artifacts: true
  rules:
    # Only run on `main` branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish_phoenix_superset_image:
  stage: publish
  extends: .docker_template
  script:
    - docker pull $PHOENIX_SUPERSET_TEST_IMAGE
    - docker tag $PHOENIX_SUPERSET_TEST_IMAGE $PHOENIX_SUPERSET_RELEASE_IMAGE
    - docker push $PHOENIX_SUPERSET_RELEASE_IMAGE
  needs:
    - job: build_phoenix_superset_image
  rules:
    # Only run on `main` branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
