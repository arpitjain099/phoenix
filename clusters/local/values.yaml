phiphiImage:
  repository: phiphi-dev-image
  tag: latest
ingress_cors:
  enabled: true
  allow_origin: "http://console.{{ .Values.base_host }}"
use_local_insecure_auth: true
api:
  cors_origins: "http://console.{{ .Values.base_host }}"
  init_db_command: "/app/projects/phiphi/entrypoint_test_seed.sh"
  apify_api_keys:
    enabled: true
    json: |
      {
        "main": "dummy_key"
      }
cert_issuer:
  enabled: false
console:
  enabled: true
  # Set env to local_cluster for local testing of the integration with the auth api endpoint
  # env: "local_cluster"
  env: "dev"
  api_url: "http://api.{{ .Values.base_host }}"
  # Should be the same as the first_admin_user_email for api
  dev_admin_email: "buildup@datavaluepeople"
  user_info_cookie_name: "phoenix_user_info"
  # Using the insecure auth for the console
  env_auth_url: "http://api.{{ .Values.base_host }}/oauth2/insecure_auth"
  # So there is no redirect for the local cluster if there is an error
  env_login_url: "http://console.{{ .Values.base_host }}/oauth2/start"
  env_logout_url: "http://console.{{ .Values.base_host }}/oauth2/sign_out"
cert-manager:
  enabled: false
oauth2-proxy:
  enabled: false
superset:
  enabled: true
  # These secrets must be created before the first apply of the chart
  init:
    adminUser:
      email: buildup@datavaluepeople.com
  image:
    repository: phoenix_superset
    tag: latest
  configOverrides:
    general: |
      APP_NAME = "Dashboard - Phoenix"

      # This must be change in conjunction with the ingress auth-response-headers
      AUTH_REMOTE_USER_ENV_VAR = "HTTP_X_AUTH_REQUEST_EMAIL"

      # Throw error if got past the auth layer
      LOGIN_REDIRECT_URL = False
  extraSecretEnv:
    SUPERSET_SECRET_KEY: "this_is_an_in_secure_secret_key"

prefect-worker:
  enabled: true
  worker:
    apiConfig: server
    config:
      workPool: "main-work-pool"
    serverApiConfig:
      apiUrl: "http://prefect-server.default.svc.cluster.local:4200/api"

baseJobTemplate:
  enabled: true

prefect-server:
  enabled: true

prefect_deployments:
  enabled: true
  enable_health_check: true
