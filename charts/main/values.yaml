# This is the base host that will be used for all ingress resources
base_host: "phoenix.local"

# The ingress class to use
# Public is the one needed for microk8s
ingressClassName: "public"


# LOCAL NON AUTHENCIATED
# This is the local insecure authenticated version of the platform
# This is used for testing and development
# It uses the api /oauth2/insecure_auth endpoint
use_local_insecure_auth: false

api:
  enabled: true
  replicas: 1
  image:
    # This is the dev image that is created by tilt
    repository: phiphi
    tag: latest
    pullPolicy: Always
  # If you want unicorn to reload for development
  reload: true
  cors_origins: ["http://*"]
  first_admin_user_email: "buildup@datavaluepeople.com"
  first_admin_user_display_name: "Buildup"
  header_auth_name: "x-auth-request-email"

  ###################
  # Example secrets
  #
  # Please replace the values with your own
  # If you are using platformdb they need to match the auth there
  ################
  # Use your own secrets see the secrets.yaml template for required data
  secretKey: "{{ .Release.Name }}-api-secrets"
  db_auth:
    host: "{{ .Release.Name }}-platformdb"
    port: "5432"
    # If using the platformdb these need to match the platformdb.auth variables with the same name
    username: "phiphi"
    password: "phiphi_password"
    database: "platform"


#######################
# Platform DB
#
# Development database for the platform. It is recommended to use a more reliable db for production.
#
# Be aware the name is platformdb as we can't use an _ or a - in the name to to a number of
# different complex reasons: helm can't process - and _ can be used for a Service annotation
#######################
# Based on superset values:
# https://github.com/apache/superset/blob/master/helm/superset/values.yaml#L771-L811
# ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql
platformdb:
  ##
  ## Use the PostgreSQL chart dependency.
  ## Set to false if bringing your own PostgreSQL.
  enabled: true

  ## Authentication parameters
  auth:
    ## PostgreSQL name for a custom user to create
    username: phiphi
    ## PostgreSQL password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    password: password
    ## PostgreSQL name for a custom database to create
    database: platform
    postgresqlPassword: postgres_pass

  ## PostgreSQL Primary parameters
  primary:
    ##
    ## Persistent Volume Storage configuration.
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
    persistence:
      ##
      ## Enable PostgreSQL persistence using Persistent Volume Claims.
      enabled: true
      ##
      ## Persistent class
      # storageClass: classname
      ##
      ## Access modes:
      accessModes:
        - ReadWriteOnce
    ## PostgreSQL port
    service:
      ports:
        postgresql: "5432"

# Cert Manager
#
# !!!!!!!!!!!!!!!!!!!!!!!!
# It is highly recommended to have the cert manager be installed separately and not part of this chart
# !!!!!!!!!!!!!!!!!!!!!!!!
# Be aware that only one cert-manager can be installed in a cluster
# If you have one already installed, set this to false
cert-manager:
  enabled: false
  # This is needed to install the CRDs
  # Default is true to make the quick start installation easier
  # https://cert-manager.io/docs/installation/helm/#3-install-customresourcedefinitions
  installCRDs: true

# Cert Issuer
# Needs a cert-manager to be installed either the subchart or a custom one
cert_issuer:
  enabled: false
  # Use `letsencrypt-staging` for testing
  # Use `letsencrypt-prod` for production/working certificates
  issuer: "letsencrypt-staging"
  issuer_email: ""

# Superset
superset:
  enabled: true

##############
# Example secrets
#
# Please replace the values with your own
###################
  # DEFAULTS:
  # supersetNode:
    # connections:
      # https://github.com/apache/superset/blob/master/helm/superset/values.yaml#L280-L284
      # db_host: '{{ .Release.Name }}-postgresql'
      # db_port: "5432"
      # db_user: superset
      # db_pass: superset
      # db_name: superset
  extraSecretEnv:
    # Generate with:
    # openssl rand -base64 42

    SUPERSET_SECRET_KEY: "<SET>"

  # If you have enabled postgres
  # Using defaults for superset
  # postgresql:
    # auth:
      # These need to match supersetNode.connections:
      # - db_user: postgresql.auth.username
      # - db_pass: postgresql.auth.password
      # - db_name: postgresql.auth.database
      # DEFAULTS
      # https://github.com/apache/superset/blob/master/helm/superset/values.yaml#L778-L786
      # username: "superset"
      # password: "superset"
      # database: "superset"
      # Set the postgres password
      # postgresPassword: "postgres_pass"


  #########################################
  # Phoenix Superset specific configurations
  #
  # A number of default overrides has been setup for the chart. These will
  # configure superset to work with the Phoenix platform.
  #
  # It is recommended that the `general` override is configured in each use of the chart and the
  # other overrides are configured as needed. Copy the `general` override in to
  # custom values and change as needed.
  #
  # This aims to avoid unpredictable behaviour when the different overrides are used together. Due
  # to the fact there is no certainty of the order in which the overrides are applied.
  # #########################################
  configOverrides:


    # General override includes the configurations that will most likely be changed for each chart
    # use.
    # Copy and change as needed
    general: |
      APP_NAME = "Dashboard - Phoenix"

      # This must be change in conjunction with the ingress auth-response-headers
      # Something in superset rewrites the header to uppercase and adds HTTP_ to the front and replaces - with _
      AUTH_REMOTE_USER_ENV_VAR = "HTTP_X_AUTH_REQUEST_EMAIL"

      # This is needed to test the system without the authentication layer
      # With false superset is configured to throw error if user can't log in
      LOGIN_REDIRECT_URL = False


    # This will configure the branding of the application
    brand: |
      # White label settings
      APP_ICON = "/static/assets/images/logo_buildup_short_200.png"
      APP_ICON_WIDTH = 200
      FAVICONS = [
          {
              "rel": "apple-touch-icon",
              "sizes": "180x180",
              "href": "/static/assets/images/apple-touch-icon.png",
          },
          {"rel": "icon", "sizes": "32x32", "href": "/static/assets/images/favicon-32x32.png"},
          {"rel": "icon", "sizes": "16x16", "href": "/static/assets/images/favicon-16x16.png"},
      ]


    # Proxy override
    # This configures the redirect_uri correctly, even with SSL offloading
    proxy: |
      ENABLE_PROXY_FIX = True


    # Auth override
    # Configures the application to use the Phoenix custom SSO manager
    auth: |
      from flask_appbuilder.security.manager import AUTH_REMOTE_USER  # type: ignore[import-untyped]
      from phoenix_superset import custom_sso_manager

      AUTH_TYPE = AUTH_REMOTE_USER

      CUSTOM_SECURITY_MANAGER = custom_sso_manager.PhoenixCustomSSOSecurityManager


oauth2-proxy:
  enabled: true
  ###################
  # Example secrets
  #
  # Please replace the values with your own
  # ###################
  config:
    cookieSecret: "<SET>"
    clientID: "<SET>"
    clientSecret: "<SET>"
